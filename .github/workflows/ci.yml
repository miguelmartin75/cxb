name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-test:
    name: ${{ matrix.nix_system }} ${{ matrix.compiler }} ${{ matrix.build_type }} (${{ matrix.os }})
    # All jobs run in parallel; format check runs conditionally within this job
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # NOTE: this is flattened intentionally, such that it's easier to read
        # and understand what combinations are being tested
        include:
          # Linux x86_64 variants
          - os: ubuntu-22.04
            nix_system: x86_64-linux
            compiler: gcc
            build_type: Debug
          - os: ubuntu-22.04
            nix_system: x86_64-linux
            compiler: gcc
            build_type: Release
          - os: ubuntu-22.04
            nix_system: x86_64-linux
            compiler: clang
            build_type: Debug
          - os: ubuntu-22.04
            nix_system: x86_64-linux
            compiler: clang
            build_type: Release
          
          # TODO: use ubuntu-22.04-arm once repo is public
          # - os: ubuntu-22.04-arm
          #   nix_system: aarch64-linux
          #   compiler: gcc
          #   build_type: Debug
          # - os: ubuntu-22.04-arm
          #   nix_system: aarch64-linux
          #   compiler: gcc
          #   build_type: Release
          # - os: ubuntu-22.04-arm
          #   nix_system: aarch64-linux
          #   compiler: clang
          #   build_type: Debug
          # - os: ubuntu-22.04-arm
          #   nix_system: aarch64-linux
          #   compiler: clang
          #   build_type: Release

          # macOS Intel (macos-13) variants
          - os: macos-13
            nix_system: x86_64-darwin
            compiler: clang
            build_type: Debug
          - os: macos-13
            nix_system: x86_64-darwin
            compiler: clang
            build_type: Release

          # macOS Apple Silicon (macos-14)
          - os: macos-14
            nix_system: aarch64-darwin
            compiler: clang
            build_type: Debug
          - os: macos-14
            nix_system: aarch64-darwin
            compiler: clang
            build_type: Release
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Check formatting
        if: matrix.os == 'ubuntu-22.04' && matrix.compiler == 'clang' && matrix.build_type == 'Debug' && matrix.nix_system == 'x86_64-linux'
        run: |
          nix develop ./scripts/ci --system ${{ matrix.nix_system }} --command bash -c "./scripts/format.sh --check"
      - name: Build & Test
        env:
          COMPILER: ${{ matrix.compiler }}
          BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          nix develop ./scripts/ci --system ${{ matrix.nix_system }} --command bash ./scripts/ci/ci.sh
      - name: Coverage
        if: matrix.os == 'ubuntu-22.04' && matrix.compiler == 'clang' && matrix.build_type == 'Debug' && matrix.nix_system == 'x86_64-linux'
        run: |
          nix develop ./scripts/ci --system ${{ matrix.nix_system }} --command bash ./scripts/ci/coverage.sh
      - name: Upload coverage report
        if: matrix.os == 'ubuntu-22.04' && matrix.compiler == 'clang' && matrix.build_type == 'Debug' && matrix.nix_system == 'x86_64-linux'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            build/coverage/coverage.txt
            build/coverage/coverage.json
      - name: Publish coverage badge
        if: matrix.os == 'ubuntu-22.04' && matrix.compiler == 'clang' && matrix.build_type == 'Debug' && matrix.nix_system == 'x86_64-linux'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/coverage
          enable_jekyll: false
